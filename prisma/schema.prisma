// This is your Prisma schema file, 
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// Generator for the Prisma client
generator client {
  // Provider for the Prisma client
  provider = "prisma-client-js"
}

// Datasource configuration for the database
datasource db {
  // Provider for the database
  provider = "mongodb"
  // URL for the database, retrieved from the environment variable DATABASE_URL
  url = env("DATABASE_URL")
}

// Model for the User entity
model User {
  // Unique identifier for the user, default value is auto-generated
  id String @id @default(auto()) @map("_id") @db.ObjectId
  // User's name
  name String? 
  // User's email, unique across all users
  email String? @unique 
  // Timestamp for when the user's email was verified
  emailVerified DateTime?
  // User's image URL
  image String?
  // User's hashed password
  hashedPassword String?
  // Timestamp for when the user was created
  createdAt DateTime @default(now())
  // Timestamp for when the user was last updated
  updatedAt DateTime @updatedAt
  // Array of favorite listing IDs, stored as Object IDs in the database
  favoriteIds String[] @db.ObjectId

  // Relations to other models
  // Accounts associated with the user
  accounts Account[] 
  // Listings created by the user
  listings Listing[]
  // Reservations made by the user
  reservations Reservation[]
}

// Model for the Account entity
model Account {
  // Unique identifier for the account, default value is auto-generated
  id String @id @default(auto()) @map("_id") @db.ObjectId
  // Foreign key referencing the user who owns the account
  userId String @db.ObjectId
  // Type of account (e.g. Google, Facebook, etc.)
  type String
  // Provider of the account (e.g. Google, Facebook, etc.)
  provider String
  // Unique identifier for the account provider
  providerAccountId String
  // Refresh token for the account, stored as a string in the database
  refresh_token String? @db.String
  // Access token for the account, stored as a string in the database
  access_token String? @db.String
  // Expiration timestamp for the access token
  expires_at Int?
  // Type of token (e.g. bearer, etc.)
  token_type String?
  // Scope of the token (e.g. read, write, etc.)
  scope String?
  // ID token for the account, stored as a string in the database
  id_token String? @db.String
  // Session state for the account
  session_state String?

  // Relation to the User model
  // User who owns the account, referenced by the userId field
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Unique constraint on the provider and providerAccountId fields
  @@unique([provider, providerAccountId])
}

// Model for the Listing entity
model Listing {
  // Unique identifier for the listing, default value is auto-generated
  id String @id @default(auto()) @map("_id") @db.ObjectId
  // Title of the listing
  title String
  // Description of the listing
  description String
  // Image URL for the listing
  imageSrc String
  // Timestamp for when the listing was created
  createdAt DateTime @default(now())
  // Category of the listing
  categoty String
  // Number of rooms in the listing
  roomCount Int
  // Number of bathrooms in the listing
  bathroomCount Int
  // Number of guests the listing can accommodate
  guestCount Int
  // Location value for the listing
  locationValue String
  // Foreign key referencing the user who created the listing
  userId String @db.ObjectId
  // Price of the listing
  price Int

  // Relations to other models
  // User who created the listing, referenced by the userId field
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  // Reservations made for the listing
  reservation Reservation[]
}

// Model for the Reservation entity
model Reservation {
  // Unique identifier for the reservation, default value is auto-generated
  id String @id @default(auto()) @map("_id") @db.ObjectId
  // Foreign key referencing the user who made the reservation
  userId String @db.ObjectId
  // Foreign key referencing the listing for which the reservation was made
  listingId String @db.ObjectId
  // Start date of the reservation
  startDate DateTime
  // End date of the reservation
  endDate DateTime
  // Total price of the reservation
  totalPrice Int
  // Timestamp for when the reservation was created
  createdAt DateTime @default(now())
  
  // Relation to the User model
  // User who made the reservation, referenced by the userId field
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  // Relation to the Listing model
  // Listing for which the reservation was made, referenced by the listingId field
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}